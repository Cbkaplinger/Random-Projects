View(final_violent)
final_violent <- violent4 %>%
right_join(state_abbrev, join_by(State == State)) %>%
left_join(zip, join_by(City == city, state == state))
str(final_violent) # Do Not Change
final_violent <- violent4 %>%
left_join(state_abbrev, join_by(State == State)) %>%
left_join(zip, join_by(City == city, state == state))
str(final_violent) # Do Not Change
final_violent <- violent4 %>%
right_join(state_abbrev, join_by(State == State)) %>%
left_join(zip, join_by(City == city, state == state))
str(final_violent) # Do Not Change
final_violent <- violent4 %>%
right_join(state_abbrev, join_by(State == State)) %>%
left_join(zip, join_by(City == city, state == state))
str(final_violent) # Do Not Change
final_violent <- violent4 %>%
right_join(state_abbrev, join_by(State == State)) %>%
left_join(zip, join_by(City == city, state == state))
str(final_violent) # Do Not Change
final_violent <- violent4 %>%
right_join(state_abbrev, join_by(State == State)) %>%
left_join(zip, join_by(City == city, state == state))
str(final_violent) # Do Not Change
final_violent <- violent4 %>%
left_join(state_abbrev, join_by(State == State)) %>%
left_join(zip, join_by(City == city, state == state))
str(final_violent) # Do Not Change
final_violent <- violent4 %>%
left_join(state_abbrev, join_by(State == State)) %>%
left_join(zip, join_by(City == city, state == state)) %>%
select(-state)
str(final_violent) # Do Not Change
View(state_abbrev)
View(zip)
View(state_abbrev)
View(census)
View(census)
View(violent3)
View(state_abbrev)
library(tidyverse)
library(fst)
# Loads in the entire folder with all of the datasets
# Make sure to change the file path to where all of the data is
SMT <- list.files(path = "~/Desktop/UNC-Baseball/SMT/SMT-Data/SMT-All", pattern = "\\.csv", full.names = TRUE)
SMT <- bind_rows(lapply(SMT, read.csv, header = TRUE, sep = ";"))
tmData22 = read_fst("~/Desktop/UNC-Baseball/SMT/TrackMan-Data/tmData22.fst", col = c("Batter", "BatterTeam"))
tmData23 =  read_fst("~/Desktop/UNC-Baseball/SMT/TrackMan-Data/tmData23.fst", col = c("Batter", "BatterTeam"))
tmData = unique(bind_rows(tmData22, tmData23)) %>%
filter(BatterTeam == "NOR_TAR" | BatterTeam == "NOR_TAR2")
Defense <- SMT %>%
filter(EventPlayerName %in% tmData$Batter,
!is.na(FielderMove)) %>%
mutate(FielderProbability = if_else(is.na(FielderProbability), 0, FielderProbability))
Out = c("In Play, Fly Out", "In Play, Sacrifice Fly", "In Play, Ground Out", "In Play, Double Play", "In Play, Fielder's Choice", "In Play, Sacrifice Bunt")
Defense$FielderProbability = Defense$FielderProbability / 100
Defense <- Defense %>%
mutate(Out = ifelse(Result %in% Out, 1, 0))
Defense$OAA = Defense$Out - Defense$FielderProbability
Defense_grouped = Defense %>%
group_by(EventPlayerName) %>%
summarize(Plays = n(),
MaxVelo = round(max(FielderThrow, na.rm = TRUE), 2),
MaxDistanceThrown = round(max(FielderThrowDistance, na.rm = TRUE), 2),
xCatchProb = round(mean(FielderProbability, na.rm = TRUE), 2),
ActualCatchProb = round(mean(Out) , 2),
CatchProbAdded = ActualCatchProb - xCatchProb,
FielderRouteEfficiency = round(mean(FielderRouteEfficiency, na.rm = TRUE), 2),
FielderMove = round(mean(FielderMove), 2),
FielderReactionTime = round(mean(FielderReaction), 2),
OAA = round(sum(OAA), 2)) %>%
filter(Plays > 1)
BR = SMT %>%
filter(BatterName %in% tmData$Batter)
#!is.na(BaserunnerInitial))
BR$BatterSprintSpeed = round(BR$BatterTop * 1.46667, 2)
BR_grouped = BR %>%
group_by(BatterName) %>%
summarize(HomeToFirst = round(min(BatterTimeToFirst, na.rm = TRUE), 2),
BatterAvgSpeed = round(mean(BatterSprintSpeed, na.rm = TRUE), 2),
BatterMaxSpeed = round(max(BatterSprintSpeed, na.rm = TRUE), 2))
#BaserunnerInitial = round(mean(BaserunnerInitial, na.rm = TRUE), 2),
#BaserunnerSecondary = round(mean(BaserunnerSecondary, na.rm = TRUE), 2),
#BaserunnerFinal = round(mean(BaserunnerFinal, na.rm = TRUE), 2),
#BaserunnerDif = BaserunnerFinal - BaserunnerInitial)
write.csv(Defense_grouped, "~/Desktop/UNC-Baseball/SMT/DefenseGrouped.csv", row.names = FALSE)
write.csv(BR_grouped, "~/Desktop/UNC-Baseball/SMT/BaserunningGrouped.csv", row.names = FALSE)
library(tidyverse)
library(fst)
# Loads in the entire folder with all of the datasets
# Make sure to change the file path to where all of the data is
SMT <- list.files(path = "~/Desktop/UNC-Baseball/SMT/SMT-Data/SMT-All", pattern = "\\.csv", full.names = TRUE)
SMT <- bind_rows(lapply(SMT, read.csv, header = TRUE, sep = ";"))
tmData22 = read_fst("~/Desktop/UNC-Baseball/SMT/TrackMan-Data/tmData22.fst", col = c("Batter", "BatterTeam"))
tmData23 =  read_fst("~/Desktop/UNC-Baseball/SMT/TrackMan-Data/tmData23.fst", col = c("Batter", "BatterTeam"))
tmData = unique(bind_rows(tmData22, tmData23)) %>%
filter(BatterTeam == "NOR_TAR" | BatterTeam == "NOR_TAR2")
Defense <- SMT %>%
filter(EventPlayerName %in% tmData$Batter,
!is.na(FielderMove)) %>%
mutate(FielderProbability = if_else(is.na(FielderProbability), 0, FielderProbability))
Out = c("In Play, Fly Out", "In Play, Sacrifice Fly", "In Play, Ground Out", "In Play, Double Play", "In Play, Fielder's Choice", "In Play, Sacrifice Bunt")
Defense$FielderProbability = Defense$FielderProbability / 100
Defense <- Defense %>%
mutate(Out = ifelse(Result %in% Out, 1, 0))
Defense$OAA = Defense$Out - Defense$FielderProbability
Defense_grouped = Defense %>%
group_by(EventPlayerName) %>%
summarize(Plays = n(),
MaxVelo = round(max(FielderThrow, na.rm = TRUE), 2),
MaxDistanceThrown = round(max(FielderThrowDistance, na.rm = TRUE), 2),
xCatchProb = round(mean(FielderProbability, na.rm = TRUE), 2),
ActualCatchProb = round(mean(Out) , 2),
CatchProbAdded = ActualCatchProb - xCatchProb,
FielderRouteEfficiency = round(mean(FielderRouteEfficiency, na.rm = TRUE), 2),
FielderMove = round(mean(FielderMove), 2),
FielderReactionTime = round(mean(FielderReaction), 2),
OAA = round(sum(OAA), 2)) %>%
filter(Plays > 1)
BR = SMT %>%
filter(BatterName %in% tmData$Batter)
#!is.na(BaserunnerInitial))
BR$BatterSprintSpeed = round(BR$BatterTop * 1.46667, 2)
BR_grouped = BR %>%
group_by(BatterName) %>%
summarize(HomeToFirst = round(min(BatterTimeToFirst, na.rm = TRUE), 2),
BatterAvgSpeed = round(mean(BatterSprintSpeed, na.rm = TRUE), 2),
BatterMaxSpeed = round(max(BatterSprintSpeed, na.rm = TRUE), 2))
#BaserunnerInitial = round(mean(BaserunnerInitial, na.rm = TRUE), 2),
#BaserunnerSecondary = round(mean(BaserunnerSecondary, na.rm = TRUE), 2),
#BaserunnerFinal = round(mean(BaserunnerFinal, na.rm = TRUE), 2),
#BaserunnerDif = BaserunnerFinal - BaserunnerInitial)
#write.csv(Defense_grouped, "~/Desktop/UNC-Baseball/SMT/DefenseGrouped.csv", row.names = FALSE)
#write.csv(BR_grouped, "~/Desktop/UNC-Baseball/SMT/BaserunningGrouped.csv", row.names = FALSE)
View(BR_grouped)
library(tidyverse)
library(fst)
# Loads in the entire folder with all of the datasets
# Make sure to change the file path to where all of the data is
SMT <- list.files(path = "~/Desktop/UNC-Baseball/SMT/SMT-Data/SMT-All", pattern = "\\.csv", full.names = TRUE)
SMT <- bind_rows(lapply(SMT, read.csv, header = TRUE, sep = ";"))
tmData22 = read_fst("~/Desktop/UNC-Baseball/SMT/TrackMan-Data/tmData22.fst", col = c("Batter", "BatterTeam"))
tmData23 =  read_fst("~/Desktop/UNC-Baseball/SMT/TrackMan-Data/tmData23.fst", col = c("Batter", "BatterTeam"))
tmData = unique(bind_rows(tmData22, tmData23)) %>%
filter(BatterTeam == "NOR_TAR" | BatterTeam == "NOR_TAR2")
Defense <- SMT %>%
filter(EventPlayerName %in% tmData$Batter,
!is.na(FielderMove)) %>%
mutate(FielderProbability = if_else(is.na(FielderProbability), 0, FielderProbability))
Out = c("In Play, Fly Out", "In Play, Sacrifice Fly", "In Play, Ground Out", "In Play, Double Play", "In Play, Fielder's Choice", "In Play, Sacrifice Bunt")
Defense$FielderProbability = Defense$FielderProbability / 100
Defense <- Defense %>%
mutate(Out = ifelse(Result %in% Out, 1, 0))
Defense$OAA = Defense$Out - Defense$FielderProbability
Defense_grouped = Defense %>%
group_by(EventPlayerName) %>%
summarize(Plays = n(),
`MaxVelo (mph)` = round(max(FielderThrow, na.rm = TRUE), 2),
`MaxDistanceThrown (ft)` = round(max(FielderThrowDistance, na.rm = TRUE), 2),
xCatchProb = round(mean(FielderProbability, na.rm = TRUE), 2),
ActualCatchProb = round(mean(Out) , 2),
CatchProbAdded = ActualCatchProb - xCatchProb,
FielderRouteEfficiency = round(mean(FielderRouteEfficiency, na.rm = TRUE), 2),
`AvgFielderMove (ft)` = round(mean(FielderMove), 2),
`FielderReactionTime (s)` = round(mean(FielderReaction), 2),
OAA = round(sum(OAA), 2)) %>%
filter(Plays > 1)
BR = SMT %>%
filter(BatterName %in% tmData$Batter)
#!is.na(BaserunnerInitial))
BR$BatterSprintSpeed = round(BR$BatterTop * 1.46667, 2)
BR_grouped = BR %>%
group_by(BatterName) %>%
summarize(`HomeToFirst (s)` = round(min(BatterTimeToFirst, na.rm = TRUE), 2),
`BatterAvgSpeed (ft/s)`= round(mean(BatterSprintSpeed, na.rm = TRUE), 2),
`BatterMaxSpeed (ft/s)`= round(max(BatterSprintSpeed, na.rm = TRUE), 2))
#BaserunnerInitial = round(mean(BaserunnerInitial, na.rm = TRUE), 2),
#BaserunnerSecondary = round(mean(BaserunnerSecondary, na.rm = TRUE), 2),
#BaserunnerFinal = round(mean(BaserunnerFinal, na.rm = TRUE), 2),
#BaserunnerDif = BaserunnerFinal - BaserunnerInitial)
#write.csv(Defense_grouped, "~/Desktop/UNC-Baseball/SMT/DefenseGrouped.csv", row.names = FALSE)
#write.csv(BR_grouped, "~/Desktop/UNC-Baseball/SMT/BaserunningGrouped.csv", row.names = FALSE)
View(Defense_grouped)
library(tidyverse)
library(fst)
# Loads in the entire folder with all of the datasets
# Make sure to change the file path to where all of the data is
SMT <- list.files(path = "~/Desktop/UNC-Baseball/SMT/SMT-Data/SMT-All", pattern = "\\.csv", full.names = TRUE)
SMT <- bind_rows(lapply(SMT, read.csv, header = TRUE, sep = ";"))
tmData22 = read_fst("~/Desktop/UNC-Baseball/SMT/TrackMan-Data/tmData22.fst", col = c("Batter", "BatterTeam"))
tmData23 =  read_fst("~/Desktop/UNC-Baseball/SMT/TrackMan-Data/tmData23.fst", col = c("Batter", "BatterTeam"))
tmData = unique(bind_rows(tmData22, tmData23)) %>%
filter(BatterTeam == "NOR_TAR" | BatterTeam == "NOR_TAR2")
Defense <- SMT %>%
filter(EventPlayerName %in% tmData$Batter,
!is.na(FielderMove)) %>%
mutate(FielderProbability = if_else(is.na(FielderProbability), 0, FielderProbability))
Out = c("In Play, Fly Out", "In Play, Sacrifice Fly", "In Play, Ground Out", "In Play, Double Play", "In Play, Fielder's Choice", "In Play, Sacrifice Bunt")
Defense$FielderProbability = Defense$FielderProbability / 100
Defense <- Defense %>%
mutate(Out = ifelse(Result %in% Out, 1, 0))
Defense$OAA = Defense$Out - Defense$FielderProbability
Defense_grouped = Defense %>%
group_by(EventPlayerName) %>%
summarize(Plays = n(),
`MaxVelo (mph)` = round(max(FielderThrow, na.rm = TRUE), 2),
`MaxDistanceThrown (ft)` = round(max(FielderThrowDistance, na.rm = TRUE), 2),
xCatchProb = round(mean(FielderProbability, na.rm = TRUE), 2),
ActualCatchProb = round(mean(Out) , 2),
CatchProbAdded = ActualCatchProb - xCatchProb,
FielderRouteEfficiency = round(mean(FielderRouteEfficiency, na.rm = TRUE), 2),
`AvgFielderMove (ft)` = round(mean(FielderMove), 2),
AvgFielderReactionTime = round(mean(FielderReaction), 2),
OAA = round(sum(OAA), 2)) %>%
filter(Plays > 1)
BR = SMT %>%
filter(BatterName %in% tmData$Batter)
#!is.na(BaserunnerInitial))
BR$BatterSprintSpeed = round(BR$BatterTop * 1.46667, 2)
BR_grouped = BR %>%
group_by(BatterName) %>%
summarize(`HomeToFirst (s)` = round(min(BatterTimeToFirst, na.rm = TRUE), 2),
`BatterAvgSpeed (ft/s)`= round(mean(BatterSprintSpeed, na.rm = TRUE), 2),
`BatterMaxSpeed (ft/s)`= round(max(BatterSprintSpeed, na.rm = TRUE), 2))
#BaserunnerInitial = round(mean(BaserunnerInitial, na.rm = TRUE), 2),
#BaserunnerSecondary = round(mean(BaserunnerSecondary, na.rm = TRUE), 2),
#BaserunnerFinal = round(mean(BaserunnerFinal, na.rm = TRUE), 2),
#BaserunnerDif = BaserunnerFinal - BaserunnerInitial)
#write.csv(Defense_grouped, "~/Desktop/UNC-Baseball/SMT/DefenseGrouped.csv", row.names = FALSE)
#write.csv(BR_grouped, "~/Desktop/UNC-Baseball/SMT/BaserunningGrouped.csv", row.names = FALSE)
View(Defense_grouped)
library(tidyverse)
library(fst)
# Loads in the entire folder with all of the datasets
# Make sure to change the file path to where all of the data is
SMT <- list.files(path = "~/Desktop/UNC-Baseball/SMT/SMT-Data/SMT-All", pattern = "\\.csv", full.names = TRUE)
SMT <- bind_rows(lapply(SMT, read.csv, header = TRUE, sep = ";"))
tmData22 = read_fst("~/Desktop/UNC-Baseball/SMT/TrackMan-Data/tmData22.fst", col = c("Batter", "BatterTeam"))
tmData23 =  read_fst("~/Desktop/UNC-Baseball/SMT/TrackMan-Data/tmData23.fst", col = c("Batter", "BatterTeam"))
tmData = unique(bind_rows(tmData22, tmData23)) %>%
filter(BatterTeam == "NOR_TAR" | BatterTeam == "NOR_TAR2")
Defense <- SMT %>%
filter(EventPlayerName %in% tmData$Batter,
!is.na(FielderMove)) %>%
mutate(FielderProbability = if_else(is.na(FielderProbability), 0, FielderProbability))
Out = c("In Play, Fly Out", "In Play, Sacrifice Fly", "In Play, Ground Out", "In Play, Double Play", "In Play, Fielder's Choice", "In Play, Sacrifice Bunt")
Defense$FielderProbability = Defense$FielderProbability / 100
Defense <- Defense %>%
mutate(Out = ifelse(Result %in% Out, 1, 0))
Defense$OAA = Defense$Out - Defense$FielderProbability
Defense_grouped = Defense %>%
group_by(EventPlayerName) %>%
summarize(Plays = n(),
`MaxVelo (mph)` = round(max(FielderThrow, na.rm = TRUE), 2),
`MaxDistanceThrown (ft)` = round(max(FielderThrowDistance, na.rm = TRUE), 2),
xCatchProb = round(mean(FielderProbability, na.rm = TRUE), 2),
ActualCatchProb = round(mean(Out) , 2),
CatchProbAdded = ActualCatchProb - xCatchProb,
FielderRouteEfficiency = round(mean(FielderRouteEfficiency, na.rm = TRUE), 2),
`AvgFielderMove (ft)` = round(mean(FielderMove), 2),
AvgFielderReactionTime = round(mean(FielderReaction), 2),
OAA = round(sum(OAA), 2)) %>%
filter(Plays > 1)
BR = SMT %>%
filter(BatterName %in% tmData$Batter)
#!is.na(BaserunnerInitial))
BR$BatterSprintSpeed = round(BR$BatterTop * 1.46667, 2)
BR_grouped = BR %>%
group_by(BatterName) %>%
summarize(Count = n(),
`HomeToFirst (s)` = round(min(BatterTimeToFirst, na.rm = TRUE), 2),
`BatterAvgSpeed (ft/s)`= round(mean(BatterSprintSpeed, na.rm = TRUE), 2),
`BatterMaxSpeed (ft/s)`= round(max(BatterSprintSpeed, na.rm = TRUE), 2))
#BaserunnerInitial = round(mean(BaserunnerInitial, na.rm = TRUE), 2),
#BaserunnerSecondary = round(mean(BaserunnerSecondary, na.rm = TRUE), 2),
#BaserunnerFinal = round(mean(BaserunnerFinal, na.rm = TRUE), 2),
#BaserunnerDif = BaserunnerFinal - BaserunnerInitial)
#write.csv(Defense_grouped, "~/Desktop/UNC-Baseball/SMT/DefenseGrouped.csv", row.names = FALSE)
#write.csv(BR_grouped, "~/Desktop/UNC-Baseball/SMT/BaserunningGrouped.csv", row.names = FALSE)
View(BR)
View(BR_grouped)
View(Defense)
library(tidyverse)
library(rvest)
library(xml2) # Install if needed
library(tidyverse)
library(rvest)
library(xml2) # Install if needed
state_abbrev_url <- "https://state.1keydata.com/state-abbreviations.php"
state_abbrev1 <- state_abbrev_url |>
read_html() |>
html_table(fill = TRUE)
state_abbrev1
state_abbrev_url <- "https://state.1keydata.com/state-abbreviations.php"
state_abbrev1 <- state_abbrev_url |>
read_html() |>
html_table(fill = TRUE)
state_abbrev1
state_abbrev2 <- state_abbrev1[[3]][-1,]
state_abbrev2
state_abbrev_top <- state_abbrev2[,1:2]
state_abbrev_bottom <- state_abbrev2[,3:4]
state_abbrev_top
state_abbrev_bottom
names(state_abbrev_top)=c("State","Abbrev")
names(state_abbrev_bottom)=c("State","Abbrev")
state_abbrev_top
state_abbrev_bottom
state_abbrev3 <- rbind(state_abbrev_top, state_abbrev_bottom) |> arrange(State)
state_abbrev3
mariokart_url <- "https://www.mariowiki.com/Mario_Kart_8_item_probability_distributions"
mariokart1 <- mariokart_url |>
read_html() |>
html_table(fill = TRUE)
mariokart2 <- mariokart1[[5]]
mariokart2
mariokart3 <-mariokart2[-1,]
mariokart3
colnames(mariokart3) = c('distance', 'banana', 'green_shell', 'red_shell',
'mushroom', 'bob-omb', 'bloopers', 'blue_shell',
'triple_mushroom', 'star', 'bullet_bill', 'lightning',
'golden_mushroom', 'fire_flower', 'piranha_plant', 'super_horn',
'boomerang_flower', 'coin', 'triple_banana', 'triple_green_shell',
'triple_red_shell', 'crazy_eight')
mariokart3
mariokart4 = mariokart3 %>%
mutate(across(everything(), ~replace.na(.x)))
mariokart4 = mariokart3 %>%
mutate(across(everything(), ~replace.na(.x, 0)))
mariokart4 = mariokart3 %>%
mutate(across(everything(), ~replace_na(.x, 0)))
mariokart4
mariokart4 %>%
select(-distance) %>%
rowSums()
mariokart5 = mariokart4 %>%
mutate(across(banana:crazy_eight, ~.x/200))
mariokart5
mariokart_img = mariokrt_url %>%
read_html() %>%
html_elements("img") %>%
xml_attr()
mariokart_img = mariokart_url %>%
read_html() %>%
html_elements("img") %>%
xml_attr()
mariokart_img = mariokart_url %>%
read_html() %>%
html_elements("img") %>%
xml_attr("alt")
mariokart_img
mariokart_img = mariokart_url %>%
read_html() %>%
html_elements("img") %>%
xml_attr("alt")
mariokart_img2 = mariokart_img[1:21]
mariokart_img2
mariokart_names2 <- mariokart_names |>
mutate(names = str_replace_all(names, " in Mario Kart 8", ""))
mariokart_names = tibble(names = mariokart_img2)
mariokart_names
mariokart_names2 <- mariokart_names |>
mutate(names = str_replace_all(names, " in Mario Kart 8", ""))
mariokart_names2
mariokart_names3 <- mariokart_names2 |>
mutate(names = ifelse(names == 'Artwork of a Mushroom (also used Deluxe)',
'Mushroom', names)) |>
mutate(names = ifelse(names == 'A Triple Mushroom',
'Triple Mushroom', names)) |>
mutate(names = ifelse(names == 'Artwork of a Golden Mushroom (also used for Mario Kart 8 Deluxe)',
'Golden Mushroom', names)) |>
mutate(names = ifelse(names == 'Artwork of a Coin',
'Coin', names))
mariokart_names4 <- rbind(tibble(names = c('Distance')), mariokart_names3)
mariokart_names4
mariokart_url <- "https://www.mariowiki.com/Mario_Kart_8_item_probability_distributions"
mariokart1 <- mariokart_url |>
read_html() |>
html_table(fill = TRUE)
mariokart2 <- mariokart1[[5]][-1,]
colnames(mariokart2) <- mariokart_names4 |> pull(names)
mariokart3 <- mariokart2 |>
mutate(across(everything(), ~replace_na(.x, 0))) |>
mutate(across(Banana:`Crazy Eight`, ~.x/200))
mariokart3
mariokart_url <- "https://www.mariowiki.com/Mario_Kart_8_item_probability_distributions"
mariokart1 <- mariokart_url |>
read_html() |>
html_table(fill = TRUE)
mariokart2 <- mariokart1[[4]][-1,]
colnames(mariokart2) <- mariokart_names4 |> pull(names)
mariokart3 <- mariokart2 |>
mutate(across(everything(), ~replace_na(.x, 0))) |>
mutate(across(Banana:`Crazy Eight`, ~.x/200))
mariokart3
library(tidyverse)
library(rvest)
library(xml2) # Install if needed
state_abbrev_url <- "https://state.1keydata.com/state-abbreviations.php"
state_abbrev1 <- state_abbrev_url |>
read_html() |>
html_table(fill = TRUE)
state_abbrev1
state_abbrev2 <- state_abbrev1[[3]][-1,]
state_abbrev2
state_abbrev_top <- state_abbrev2[,1:2]
state_abbrev_bottom <- state_abbrev2[,3:4]
state_abbrev_top
state_abbrev_bottom
names(state_abbrev_top)=c("State","Abbrev")
names(state_abbrev_bottom)=c("State","Abbrev")
state_abbrev_top
state_abbrev_bottom
state_abbrev3 <- rbind(state_abbrev_top, state_abbrev_bottom) |> arrange(State)
state_abbrev3
mariokart_url <- "https://www.mariowiki.com/Mario_Kart_8_item_probability_distributions"
mariokart1 <- mariokart_url |>
read_html() |>
html_table(fill = TRUE)
mariokart2 <- mariokart1[[5]]
mariokart2
mariokart3 <-mariokart2[-1,]
mariokart3
colnames(mariokart3) = c('distance', 'banana', 'green_shell', 'red_shell',
'mushroom', 'bob-omb', 'bloopers', 'blue_shell',
'triple_mushroom', 'star', 'bullet_bill', 'lightning',
'golden_mushroom', 'fire_flower', 'piranha_plant', 'super_horn',
'boomerang_flower', 'coin', 'triple_banana', 'triple_green_shell',
'triple_red_shell', 'crazy_eight')
mariokart3
mariokart4 = mariokart3 %>%
mutate(across(everything(), ~replace_na(.x, 0)))
mariokart4
mariokart4 %>%
select(-distance) %>%
rowSums()
mariokart5 = mariokart4 %>%
mutate(across(banana:crazy_eight, ~.x/200))
mariokart5
hford = "https://www.imdb.com/name/nm0000148/"
hford_movies_list = hford %>%
read_html() %>%
html_elements("#")
mariokart_img = mariokart_url %>%
read_html() %>%
html_elements("img") %>%
xml_attr("alt")
mariokart_img2 = mariokart_img[1:21]
mariokart_img2
mariokart_names = tibble(names = mariokart_img2)
mariokart_names
mariokart_names2 <- mariokart_names |>
mutate(names = str_replace_all(names, " in Mario Kart 8", ""))
mariokart_names2
mariokart_names3 <- mariokart_names2 |>
mutate(names = ifelse(names == 'Artwork of a Mushroom (also used Deluxe)',
'Mushroom', names)) |>
mutate(names = ifelse(names == 'A Triple Mushroom',
'Triple Mushroom', names)) |>
mutate(names = ifelse(names == 'Artwork of a Golden Mushroom (also used for Mario Kart 8 Deluxe)',
'Golden Mushroom', names)) |>
mutate(names = ifelse(names == 'Artwork of a Coin',
'Coin', names))
mariokart_names4 <- rbind(tibble(names = c('Distance')), mariokart_names3)
mariokart_names4
mariokart_url <- "https://www.mariowiki.com/Mario_Kart_8_item_probability_distributions"
mariokart1 <- mariokart_url |>
read_html() |>
html_table(fill = TRUE)
mariokart2 <- mariokart1[[4]][-1,]
colnames(mariokart2) <- mariokart_names4 |> pull(names)
mariokart3 <- mariokart2 |>
mutate(across(everything(), ~replace_na(.x, 0))) |>
mutate(across(Banana:`Crazy Eight`, ~.x/200))
mariokart3
shiny::runApp('Desktop/Random-Projects/MLB/MLB-App')
runApp('Desktop/Random-Projects/MLB/MLB-App')
runApp('Desktop/Random-Projects/MLB/MLB-App')
runApp('Desktop/Random-Projects/MLB/MLB-App')
shiny::runApp('Desktop/Random-Projects/MLB/MLB-App')
runApp('Desktop/Random-Projects/MLB/MLB-App')
runApp('Desktop/Random-Projects/MLB/MLB-App')
runApp('Desktop/Random-Projects/MLB/MLB-App')
runApp('Desktop/Random-Projects/MLB/MLB-App')
runApp('Desktop/Random-Projects/MLB/MLB-App')
runApp('Desktop/Random-Projects/MLB/MLB-App')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Loads in the necessary libraries
library(shiny)
library(shinydashboard)
library(rsconnect)
library(DT)
library(formattable)
library(tidyverse)
library(hrbrthemes)
# Loads in the files used
source("appMLBData.R")
View(ALpitches)
runApp('Desktop/Random-Projects/MLB/MLB-App')
View(ALpitches)
runApp('Desktop/Random-Projects/MLB/MLB-App')
install.packages("viridis")
runApp('Desktop/Random-Projects/MLB/MLB-App')
runApp('Desktop/Random-Projects/MLB/MLB-App')
