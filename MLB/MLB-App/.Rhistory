stat_summary(fun.y = mean, geom = "point", size = 4, color="red") +
geom_abline(intercept = coef(stat_eng_mod)[1] - coef(stat_eng_mod)[2], slope = coef(stat_eng_mod)[2])
NCSU_salary_data_stat_eng %>%
group_by(department) %>%
summarize(mean_base_salary = mean(base_salary))
stat_eng_math_mod = lm(base_salary ~ department, data = NCSU_salary_data_stat_eng_math)
coef(stat_eng_math_mod)
NCSU_salary_data_stat_eng_math %>%
ggplot(x = years_employed, y = base_salary) +
geom_point() +
geom_smooth(mehtod = "lm")
NCSU_salary_data_stat_eng_math %>%
ggplot(x = years_employed, y = base_salary) +
geom_point() +
geom_smooth(method = "lm")
NCSU_salary_data_stat_eng_math %>%
ggplot(aes(x = years_employed, y = base_salary)) +
geom_point() +
geom_smooth(method = "lm")
library(tidyverse)
library(broom)
NCSU_salary_data <- read_csv("NCSU_salary_export_data.csv", show_col_types = FALSE) |>
separate(hire_date, c('hire_month', 'hire_day', 'hire_year'), sep = '/') |>
mutate(years_employed = 2023 - as.numeric(hire_year))
head(NCSU_salary_data)
NCSU_salary_data |>
filter(department %in% c('English', 'Statistics')) |>
ggplot(aes(x = department, y = base_salary)) +
geom_violin() +
stat_summary(fun.y = mean)
NCSU_salary_data_stat_eng = NCSU_salary_data |>
filter(department %in% c('English', 'Statistics'))
stat_eng_mod = lm(base_salary ~ department, data = NCSU_salary_data_stat_eng)
coef(stat_eng_mod)
NCSU_salary_data_stat_eng %>%
group_by(department) %>%
summarize(mean_base_salary = mean(base_salary))
NCSU_salary_data |>
filter(department %in% c('English', 'Statistics')) |>
mutate(department = fct(department)) |>
mutate(department = fct_relevel(department, c('English', 'Statistics'))) |>
ggplot(aes(x = department, y = base_salary)) +
geom_violin() +
stat_summary(fun.y = mean, geom = "point", size = 4, color="red") +
geom_abline(intercept = coef(stat_eng_mod)[1] - coef(stat_eng_mod)[2], slope = coef(stat_eng_mod)[2])
NCSU_salary_data_stat_eng_math <- NCSU_salary_data |>
filter(department %in% c('English', 'Mathematics', 'Statistics'))
NCSU_salary_data_stat_eng_math |>
ggplot(aes(x = department, y = base_salary)) +
geom_violin() +
stat_summary(fun.y = mean, geom = "point", size = 4, color="red")
stat_eng_math_mod = lm(base_salary ~ department, data = NCSU_salary_data_stat_eng_math)
coef(stat_eng_math_mod)
NCSU_salary_data_stat_eng_math %>%
ggplot(aes(x = years_employed, y = base_salary, color = department)) +
geom_point() +
geom_smooth(method = "lm")
years_mod = lm(base_salary ~ years_employed + department, data = NCSU_salary_data_stat_eng_math)
tidy(years_mod)
NCSU_salary_data4 = NCSU_salary_data %>%
filter(department %in% c('English', 'Mathematics', 'Statistics', "Counseling Services"))
NCSU_salary_data4 = NCSU_salary_data %>%
filter(department %in% c('English', 'Mathematics', 'Statistics', "Counseling Services"))
NCSU_salary_data4 %>%
ggplot(aes(x = years_employed, y = base_salary, color = department)) +
geom_point() +
geom_smooth(method = "lm")
years_mod_with_int = lm(base_salary ~ years_employed + department + years_employed*department, data = NCSU_salary_data4)
tidy(years_mod_with_int)
NCSU_salary_data %>%
group_by(department) %>%
count()
NCSU_salary_data %>%
group_by(department) %>%
count() %>%
arrange(n)
NCSU_salary_data %>%
group_by(department) %>%
count() %>%
arrange(desc(n))
NCSU_salary_data %>%
group_by(department) %>%
count() %>%
arrange(desc(n))
ten = NCSU_salary_data %>%
filter(department %in% c("CVM Teaching Hospital", "Libraries", "Dining and Catering Operations", "Crop & Soil", "Dept of Clinical Sciences", "Biological Sciences", "DELTA", "Entomology & Plant Pathology", "Electrical & Computer Engr.", "Computer Science -engr"))
modten = lm(base_salary ~ years_employed + department + years_employed*department, data = ten)
tidy(modten)
years_mod = lm(base_salary ~ years_employed + department, data = NCSU_salary_data_stat_eng_math)
tidy(years_mod)[1:2]
years_mod_with_int = lm(base_salary ~ years_employed + department + years_employed*department, data = NCSU_salary_data4)
tidy(years_mod_with_int)[1:2]
NCSU_salary_data %>%
group_by(department) %>%
count() %>%
arrange(desc(n))
ten = NCSU_salary_data %>%
filter(department %in% c("CVM Teaching Hospital", "Libraries", "Dining and Catering Operations", "Crop & Soil", "Dept of Clinical Sciences", "Biological Sciences", "DELTA", "Entomology & Plant Pathology", "Electrical & Computer Engr.", "Computer Science -engr"))
modten = lm(base_salary ~ years_employed + department + years_employed*department, data = ten)
tidy(modten)[1:2]
NCSU_salary_data %>%
group_by(department) %>%
count() %>%
arrange(desc(n))
#ten = NCSU_salary_data %>%
#filter(department %in% c("CVM Teaching Hospital", "Libraries", "Dining and Catering Operations", "Crop & Soil", "Dept of Clinical Sciences", "Biological Sciences", "DELTA", "Entomology & Plant Pathology", "Electrical & Computer Engr.", "Computer Science -engr"))
modten = lm(base_salary ~ years_employed + department + years_employed*department, data = ten)
tidy(modten)[1:2]
NCSU_salary_data %>%
group_by(department) %>%
count() %>%
arrange(desc(n))
ten = NCSU_salary_data %>%
filter(department %in% c("CVM Teaching Hospital", "Libraries", "Dining and Catering Operations", "Crop & Soil Sciences", "Dept of Clinical Sciences", "Biological Sciences", "DELTA", "Entomology & Plant Pathology", "Electrical & Computer Engr.", "Computer Science -engr"))
modten = lm(base_salary ~ years_employed + department + years_employed*department, data = ten)
tidy(modten)[1:2]
NCSU_salary_data %>%
group_by(department) %>%
count() %>%
arrange(desc(n))
ten = NCSU_salary_data %>%
filter(department %in% c("CVM Teaching Hospital", "Libraries", "Dining and Catering Operations", "Crop & Soil Sciences", "Dept of Clinical Sciences", "Biological Sciences", "DELTA", "Entomology & Plant Pathology", "Electrical & Computer Engr.", "Computer Science-engr"))
modten = lm(base_salary ~ years_employed + department + years_employed*department, data = ten)
tidy(modten)[1:2]
NCSU_salary_data %>%
group_by(department) %>%
count() %>%
arrange(desc(n))
ten = NCSU_salary_data %>%
filter(department %in% c("CVM Teaching Hospital", "Libraries", "Dining and Catering Operations", "Crop & Soil Sciences", "Dept of Clinical Sciences", "Biological Sciences", "DELTA", "Entomology & Plant Pathology", "Electrical & Computer Engr.", "Computer Science-engr"))
modten = lm(base_salary ~ years_employed + department + years_employed*department, data = ten)
tidy(modten)[1:2] %>%
arrange()
NCSU_salary_data %>%
group_by(department) %>%
count() %>%
arrange(desc(n))
ten = NCSU_salary_data %>%
filter(department %in% c("CVM Teaching Hospital", "Libraries", "Dining and Catering Operations", "Crop & Soil Sciences", "Dept of Clinical Sciences", "Biological Sciences", "DELTA", "Entomology & Plant Pathology", "Electrical & Computer Engr.", "Computer Science-engr"))
modten = lm(base_salary ~ years_employed + department + years_employed*department, data = ten)
tidy(modten)[1:2] %>%
arrange(estimate)
ten %>%
ggplot(aes(x = years_employed, y = base_salary, color = department)) +
geom_point() +
geom_smooth(method = "lm")
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 0 + 1/(1+ exp(0 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 5 + 1/(1+ exp(0 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 1/(1+ exp(0 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 8 + 1/(1+ exp(0 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 1/(1+ exp(0 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(0 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(25 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(0 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(1 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-1 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-2 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-3 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-4 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-6 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 1 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 4/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 1 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 7/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 5/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
example = tibble(
x = rnorm(10000, mean = -2, sd = 5),
y = 3 + 2/(1+ exp(-5 - 1*x))
)
example %>%
ggplot(aes(x = x, y = y)) +
geom_point()
library(tidyverse)
library(knitr)
library(modelr)
library(broom)
set.seed(216)
bgg4 <- bgg3 |>
mutate(set = sample(x = c("train","test"), size=nrow(bgg3), replace=T, prob=c(0.80,0.10)))
lm1 <- lm(geek_rating ~ log(num_votes), data = train_bgg)
bgg <- read.csv("bgg.csv")
bgg2 <- bgg[,c(4:13,15:20)]
head(bgg2)
bgg3 = bgg2 %>%
mutate(duration = 2018 - year + 1,
vote_per_year = num_votes / duration,
own_per_year = owned / duration,
player_range = max_players - min_players,
log_vote = log(num_votes + 1),
log_own = log(owned + 1),
diff_rating = avg_rating - geek_rating)
# Do not change
bgg3[1:3,-(1:16)] |> kable()
set.seed(216)
bgg4 <- bgg3 |>
mutate(set = sample(x = c("train","test"), size=nrow(bgg3), replace=T, prob=c(0.80,0.10)))
train_bgg <- bgg4 |> filter(set == "train")
test_bgg <- bgg4 |> filter(set == "test")
lm1 <- lm(geek_rating ~ log(num_votes), data = train_bgg)
lm2 <- lm(geek_rating ~ log(owned), data = train_bgg)
lm3 <- lm(geek_rating ~ log(owned) + vote_per_year + weight, data = train_bgg)
# Do not change
lm1$coef
lm2$coef
lm3$coef
test_bgg2 <- test_bgg |> add_predictions(lm1, var = "lm1_pred")
test_bgg2 <- test_bgg2 |> add_predictions(lm2, var = "lm2_pred")
test_bgg2 <- test_bgg2 |> add_predictions(lm3, var = "lm3_pred")
test_bgg2 <- test_bgg2 |>  add_residuals(lm1, var = "lm1_resid")
test_bgg2 <- test_bgg2 |>  add_residuals(lm2, var = "lm2_resid")
test_bgg2 <- test_bgg2 |>  add_residuals(lm3, var = "lm3_resid")
# Do not change
test_bgg2[1:3, -(1:24)] |> kable()
test_bgg2 <- test_bgg |> add_predictions(lm1, var = "lm1_pred")
test_bgg2 <- test_bgg2 |> add_predictions(lm2, var = "lm2_pred")
test_bgg2 <- test_bgg2 |> add_predictions(lm3, var = "lm3_pred")
test_bgg2 <- test_bgg2 |>  add_residuals(lm1, var = "lm1_resid")
test_bgg2 <- test_bgg2 |>  add_residuals(lm2, var = "lm2_resid")
test_bgg2 <- test_bgg2 |>  add_residuals(lm3, var = "lm3_resid")
# Do not change
test_bgg2[1:3, -(1:24)]
test <- c(-5,-2,0,3,5)
MAE_func <- function(residuals){
mean(abs(residuals))
}
MAE_func(test)
bgg3 %>%
ggplot(aes(x = num_votes, y = geek_rating)) +
geom_point() +
geom_smooth()
bgg3 %>%
ggplot(aes(x = owned, y = geek_rating)) +
geom_point()
bgg3 %>%
ggplot(aes(x = log_vote, y = geek_rating)) +
geom_point()
bgg3 %>%
ggplot(aes(x = log_own, y = geek_rating)) +
geom_point()
bgg3 %>%
ggplot(aes(x = log_vote, y = geek_rating)) +
geom_point()
bgg3 %>%
ggplot(aes(x = num_votes, y = geek_rating)) +
geom_point() +
geom_smooth()
bgg3 %>%
ggplot(aes(x = owned, y = geek_rating)) +
geom_point() +
geom_smooth()
bgg3 %>%
ggplot(aes(x = log_vote, y = geek_rating)) +
geom_point() +
geom_smooth()
bgg3 %>%
ggplot(aes(x = log_own, y = geek_rating)) +
geom_point() +
geom_smooth()
bgg_fold <- na.omit(train_bgg) |> crossv_kfold(10)
mod <- lm(geek_rating ~ log(owned) + vote_per_year + weight, data = train_bgg)
bgg_fold <- bgg_fold |> mutate(tr_model = map(train, mod))
bgg_fold <- na.omit(train_bgg) |> crossv_kfold(10)
train_model_func <- function(data){
mod <- lm(geek_rating ~ log(owned) + vote_per_year + weight, data = train_bgg)
return(mod)
}
bgg_fold <- bgg_fold |> mutate(tr_model = map(train, train_model_func))
bgg_fold <- bgg_fold1 |>
mutate(predict = map2(test, tr_model, ~augment(.y, newdata = .x))) select(predict) |>
bgg_fold <- na.omit(train_bgg) |> crossv_kfold(10)
train_model_func <- function(data){
mod <- lm(geek_rating ~ log(owned) + vote_per_year + weight, data = data)
return(mod)
}
bgg_fold <- bgg_fold |> mutate(tr_model = map(train, train_model_func))
bgg_fold <- bgg_fold1 |>
mutate(predict = map2(test, tr_model, ~augment(.y, newdata = .x))) select(predict) |>
bgg_fold <- na.omit(train_bgg) |> crossv_kfold(10)
train_model_func <- function(data){
mod <- lm(geek_rating ~ log(owned) + vote_per_year + weight, data = data)
return(mod)
}
bgg_fold <- bgg_fold |> mutate(tr_model = map(train, train_model_func))
bgg_fold <- bgg_fold1 |>
mutate(predict = map2(test, tr_model, ~augment(.y, newdata = .x))) |>
select(predict) |>
unnest(cols = c(predict))
bgg_fold <- na.omit(train_bgg) |> crossv_kfold(10)
train_model_func <- function(data){
mod <- lm(geek_rating ~ log(owned) + vote_per_year + weight, data = data)
return(mod)
}
bgg_fold <- bgg_fold |> mutate(tr_model = map(train, train_model_func))
bgg_fold <- bgg_fold |>
mutate(predict = map2(test, tr_model, ~augment(.y, newdata = .x))) |>
select(predict) |>
unnest(cols = c(predict))
MAE_func(bgg_fold1_predict$.resid)
bgg_fold <- na.omit(train_bgg) |> crossv_kfold(10)
train_model_func <- function(data){
mod <- lm(geek_rating ~ log(owned) + vote_per_year + weight, data = data)
return(mod)
}
bgg_fold <- bgg_fold |> mutate(tr_model = map(train, train_model_func))
bgg_fold <- bgg_fold |>
mutate(predict = map2(test, tr_model, ~augment(.y, newdata = .x))) |>
select(predict) |>
unnest(cols = c(predict))
MAE_func(bgg_fold$.resid)
bgg_fold <- na.omit(test_bgg) |> crossv_kfold(10)
train_model_func <- function(data){
mod <- lm(geek_rating ~ log(owned) + vote_per_year + weight, data = data)
return(mod)
}
bgg_fold <- bgg_fold |> mutate(tr_model = map(train, train_model_func))
bgg_fold <- bgg_fold |>
mutate(predict = map2(test, tr_model, ~augment(.y, newdata = .x))) |>
select(predict) |>
unnest(cols = c(predict))
MAE_func(bgg_fold$.resid)
library(shiny); runApp('Desktop/Random-Projects/MLB/MLB-App/Sampleapp.R')
